"""
Classe base para opera√ß√µes com Google Sheets
Inclui detec√ß√£o inteligente de arquivos duplicados e localizador autom√°tico de credenciais
"""
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import os
import glob
import re
import json
import shutil
from typing import Optional, List

class GoogleSheetsBase:
    """Classe base para opera√ß√µes com Google Sheets com detec√ß√£o inteligente de arquivos"""
    
    def __init__(self, caminho_credenciais: str = "boletim.json", id_planilha: str = ""):
        """
        Inicializa a classe GoogleSheetsBase
        
        Args:
            caminho_credenciais: Caminho para o arquivo de credenciais JSON
            id_planilha: ID da planilha (ser√° definido pelo sistema principal)
        """
        self.CAMINHO_CREDENCIAIS = caminho_credenciais
        self.ID_PLANILHA = id_planilha
        self._client = None
    
    def localizar_credenciais(self, nome_arquivo: str = "boletim.json") -> Optional[str]:
        """
        Localiza automaticamente o arquivo de credenciais em m√∫ltiplas localiza√ß√µes
        """
        print(f"üîç Procurando por {nome_arquivo}...")
        
        # Locais para buscar (em ordem de prioridade)
        locais_busca = [
            # Pasta config do projeto (nova estrutura)
            os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), "config"),
            
            # Local atual e subpastas
            ".",
            "./config",
            "./configs", 
            "./credentials",
            
            # Pasta do usu√°rio
            os.path.expanduser("~"),
            os.path.expanduser("~/Downloads"),
            os.path.expanduser("~/Desktop"),
            os.path.expanduser("~/Documents"),
            
            # Pasta de trabalho atual
            os.getcwd(),
            os.path.join(os.getcwd(), "config"),
            
            # Diret√≥rio do script
            os.path.dirname(os.path.abspath(__file__)),
            os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
        ]
        
        # Buscar nos locais espec√≠ficos primeiro
        for local in locais_busca:
            if os.path.exists(local):
                caminho_completo = os.path.join(local, nome_arquivo)
                if os.path.isfile(caminho_completo):
                    print(f"‚úÖ Arquivo encontrado em: {caminho_completo}")
                    if self.validar_credenciais(caminho_completo):
                        return caminho_completo
        
        # Busca recursiva mais ampla
        print("üîç Fazendo busca recursiva...")
        for local in [os.path.expanduser("~"), os.getcwd()]:
            if os.path.exists(local):
                for root, dirs, files in os.walk(local):
                    # Evitar pastas que normalmente n√£o cont√™m credenciais
                    dirs[:] = [d for d in dirs if not d.startswith('.') and 
                            d not in ['node_modules', '__pycache__', 'venv', 'env']]
                    
                    if nome_arquivo in files:
                        caminho_encontrado = os.path.join(root, nome_arquivo)
                        print(f"‚úÖ Arquivo encontrado em: {caminho_encontrado}")
                        if self.validar_credenciais(caminho_encontrado):
                            return caminho_encontrado
        
        print(f"‚ùå Arquivo {nome_arquivo} n√£o encontrado em nenhum local")
        return None
    
    def validar_credenciais(self, caminho_arquivo: str) -> bool:
        """
        Valida se o arquivo de credenciais √© v√°lido
        """
        try:
            with open(caminho_arquivo, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # Verificar campos obrigat√≥rios
            campos_obrigatorios = ['type', 'project_id', 'private_key', 'client_email']
            for campo in campos_obrigatorios:
                if campo not in data:
                    print(f"‚ùå Campo obrigat√≥rio '{campo}' n√£o encontrado")
                    return False
            
            # Verificar se √© Service Account
            if data.get('type') != 'service_account':
                print("‚ùå Tipo de credencial inv√°lido (deve ser 'service_account')")
                return False
            
            print(f"‚úÖ Credenciais v√°lidas - Service Account: {data.get('client_email')}")
            return True
            
        except json.JSONDecodeError:
            print(f"‚ùå Arquivo JSON inv√°lido: {caminho_arquivo}")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao validar credenciais: {e}")
            return False
    
    def configurar_credenciais(self) -> str:
        """
        Configura automaticamente as credenciais encontrando e copiando o arquivo se necess√°rio
        """
        # Primeiro, tentar localizar o arquivo
        caminho_encontrado = self.localizar_credenciais(self.CAMINHO_CREDENCIAIS)
        
        if not caminho_encontrado:
            raise FileNotFoundError(f"Arquivo de credenciais '{self.CAMINHO_CREDENCIAIS}' n√£o encontrado!")
        
        # Se o arquivo n√£o est√° no diret√≥rio atual, copiar para c√°
        caminho_local = os.path.join(".", self.CAMINHO_CREDENCIAIS)
        
        if os.path.abspath(caminho_encontrado) != os.path.abspath(caminho_local):
            try:
                print(f"üìã Copiando credenciais para o diret√≥rio local...")
                shutil.copy2(caminho_encontrado, caminho_local)
                print(f"‚úÖ Credenciais copiadas para: {caminho_local}")
                return caminho_local
            except Exception as e:
                print(f"‚ö†Ô∏è N√£o foi poss√≠vel copiar o arquivo: {e}")
                print(f"üîß Usando arquivo original: {caminho_encontrado}")
                return caminho_encontrado
        
        print(f"‚úÖ Usando credenciais locais: {caminho_local}")
        return caminho_encontrado
    
    @property
    def client(self):
        """Lazy loading do cliente Google Sheets com conex√£o universal robusta"""
        if self._client is None:
            scopes = ["https://www.googleapis.com/auth/spreadsheets", 
                    "https://www.googleapis.com/auth/drive"]
            
            # Configurar credenciais automaticamente
            credenciais_path = self.configurar_credenciais()
            
            # Conex√£o robusta com m√∫ltiplas tentativas
            self._client = self._conectar_robusto(credenciais_path, scopes)
            
        return self._client
    
    def _conectar_robusto(self, credenciais_path: str, scopes: list, max_tentativas: int = 3):
        """Conecta de forma robusta, funcionando em qualquer computador"""
        import time
        
        for tentativa in range(1, max_tentativas + 1):
            try:
                print(f"üîÑ Conectando ao Google Sheets (tentativa {tentativa}/{max_tentativas})...")
                print(f"üîç Usando arquivo de credenciais: {credenciais_path}")
                print(f"üîç Arquivo existe: {os.path.exists(credenciais_path)}")
                print(f"üîç Arquivo √© leg√≠vel: {os.access(credenciais_path, os.R_OK)}")
                
                # Verificar se arquivo existe e √© leg√≠vel
                if not os.path.exists(credenciais_path):
                    raise FileNotFoundError(f"Arquivo de credenciais n√£o encontrado: {credenciais_path}")
                
                if not os.access(credenciais_path, os.R_OK):
                    raise PermissionError(f"Sem permiss√£o para ler o arquivo: {credenciais_path}")
                
                # Tentar ler o arquivo para verificar se est√° OK
                try:
                    with open(credenciais_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if len(content) < 100:  # Arquivo muito pequeno
                            raise ValueError(f"Arquivo de credenciais parece estar vazio ou corrompido")
                except Exception as read_error:
                    raise PermissionError(f"Erro ao ler arquivo de credenciais: {read_error}")
                
                # Recriar credenciais a cada tentativa
                creds = Credentials.from_service_account_file(credenciais_path, scopes=scopes)
                client = gspread.authorize(creds)
                
                # Teste b√°sico de conectividade
                # Tentar listar uma planilha qualquer para validar conex√£o
                try:
                    test_sheet = client.open_by_key(self.ID_PLANILHA)
                    print(f"‚úÖ Conex√£o estabelecida com sucesso!")
                    return client
                except Exception as test_error:
                    # Se for erro de permiss√£o, ainda assim a conex√£o est√° OK
                    if 'forbidden' in str(test_error).lower() or 'permission' in str(test_error).lower():
                        print(f"‚úÖ Conex√£o OK, mas sem permiss√£o na planilha: {self.ID_PLANILHA}")
                        return client
                    else:
                        raise test_error
                
            except Exception as e:
                erro_str = str(e).lower()
                print(f"‚ùå Tentativa {tentativa} falhou: {e}")
                print(f"üîç Tipo do erro: {type(e).__name__}")
                print(f"üîç Erro completo: {repr(e)}")
                
                if tentativa < max_tentativas:
                    if 'invalid_grant' in erro_str or 'jwt' in erro_str:
                        print(f"‚è≥ Problema de JWT/hor√°rio. Aguardando {5 * tentativa}s...")
                        time.sleep(5 * tentativa)  # Delay progressivo
                    else:
                        print(f"‚è≥ Aguardando {2 * tentativa}s...")
                        time.sleep(2 * tentativa)
                else:
                    # √öltima tentativa falhou
                    erro_msg = f"Falha na conex√£o ap√≥s {max_tentativas} tentativas: {e}"
                    print(f"‚ùå {erro_msg}")
                    
                    # Sugest√µes espec√≠ficas
                    if 'invalid_grant' in erro_str or 'jwt signature' in erro_str:
                        print("üí° Execute: python corretor-universal.py")
                    
                    raise ConnectionError(erro_msg)
        
        # Fallback - n√£o deveria chegar aqui
        raise ConnectionError("N√£o foi poss√≠vel estabelecer conex√£o")
    
    def encontrar_arquivo_mais_recente(self, padrao_nome: str, pasta_busca: Optional[str] = None) -> Optional[str]:
        """
        Encontra o arquivo mais recente que corresponde ao padr√£o
        Lida com arquivos duplicados como 'arquivo.csv', 'arquivo (1).csv', etc.
        """
        if pasta_busca is None:
            # Buscar nas pastas de dados (nova estrutura)
            project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
            possibles_dirs = [
                os.path.join(project_root, "data"),  # Nova estrutura
                "dados",                              # Estrutura antiga
                "data",                              # Diret√≥rio local
                "../dados", 
                "../../dados",
                ".",
                ".."
            ]
            pasta_busca = next((d for d in possibles_dirs if os.path.exists(d)), ".")
        
        # Criar padr√µes de busca flex√≠veis
        base_nome = padrao_nome.replace('.csv', '').replace('.CSV', '')
        padroes = [
            f"{base_nome}.csv",
            f"{base_nome} (*).csv",
            f"*{base_nome}*.csv",
            f"{base_nome}.CSV",
            f"{base_nome} (*).CSV"
        ]
        
        arquivos_encontrados = []
        
        for padrao in padroes:
            caminho_padrao = os.path.join(pasta_busca, padrao)
            arquivos_encontrados.extend(glob.glob(caminho_padrao))
        
        # Busca adicional por similaridade
        if not arquivos_encontrados and os.path.exists(pasta_busca):
            for arquivo in os.listdir(pasta_busca):
                if arquivo.lower().endswith(('.csv', '.CSV')):
                    # Verificar similaridade no nome
                    arquivo_limpo = arquivo.lower().replace('.csv', '').replace('.CSV', '')
                    base_limpo = base_nome.lower()
                    if base_limpo in arquivo_limpo or arquivo_limpo in base_limpo:
                        arquivos_encontrados.append(os.path.join(pasta_busca, arquivo))
        
        if not arquivos_encontrados:
            return None
        
        # Retorna o arquivo mais recente
        arquivo_mais_recente = max(arquivos_encontrados, key=os.path.getmtime)
        nome_arquivo = os.path.basename(arquivo_mais_recente)
        
        # Feedback sobre o arquivo encontrado
        if re.search(r'\(\d+\)', nome_arquivo):
            print(f"üìÑ Arquivo duplicado detectado: {nome_arquivo}")
        else:
            print(f"üìÑ Arquivo encontrado: {nome_arquivo}")
            
        return arquivo_mais_recente
    
    def limpar_data_formato(self, valor):
        """
        Fun√ß√£o especializada para limpar formata√ß√£o de datas
        Remove ap√≥strofos ('), aspas, v√≠rgulas e outros caracteres que fazem o Sheets interpretar como texto
        """
        if pd.isna(valor) or valor is None:
            return ''
        
        valor_str = str(valor).strip()
        
        # Se est√° vazio, retornar vazio
        if not valor_str:
            return ''
        
        # Remover caracteres invis√≠veis comuns
        invisiveis = ['\u200b', '\ufeff', '\u00A0', '\u200e', '\u200f', '\u202f', '\u2019', '\u2018']
        for ch in invisiveis:
            valor_str = valor_str.replace(ch, '')
        
        # LOOP para remover TODOS os ap√≥strofos, aspas e v√≠rgulas do in√≠cio
        # Continua removendo at√© n√£o ter mais nada para remover
        caracteres_remover = ["'", '"', ',', '`', '¬¥', ''', ''', '"', '"', '‚Äπ', '‚Ä∫', '¬´', '¬ª', '‚Äö', '‚Äõ']
        
        changed = True
        while changed:
            changed = False
            valor_original = valor_str
            
            # Remove do in√≠cio
            for ch in caracteres_remover:
                if valor_str.startswith(ch):
                    valor_str = valor_str[1:].strip()
                    changed = True
                    break
            
            # Remove do final
            for ch in caracteres_remover:
                if valor_str.endswith(ch):
                    valor_str = valor_str[:-1].strip()
                    changed = True
                    break
            
            # Se nada mudou, sair do loop
            if valor_str == valor_original:
                break
        
        # Retorna o valor completamente limpo
        return valor_str.strip()
    
    def limpar_numero_formato(self, valor):
        """
        Fun√ß√£o utilit√°ria para limpar formata√ß√£o desnecess√°ria de n√∫meros
        Remove .0 de n√∫meros inteiros, aspas desnecess√°rias e outros problemas comuns
        """
        if pd.isna(valor) or valor is None:
            return ''
        
        valor_str = str(valor).strip()

        # Se est√° vazio, retornar vazio
        if not valor_str:
            return ''

        # Remover caracteres invis√≠veis comuns e NBSP
        invisiveis = ['\u200b', '\ufeff', '\u00A0', '\u200e', '\u200f', '\u202f']
        for ch in invisiveis:
            valor_str = valor_str.replace(ch, '')

        # Conjunto de aspas/ap√≥strofos Unicode e variantes que podem aparecer
        quote_chars = '"' + "'" + '‚Äú‚Äù‚Äò‚Äô‚Äπ‚Ä∫¬´¬ª`¬¥‚Äö‚Äõ'  # inclui v√°rias variantes

        # Fun√ß√£o para remover aspas/char especiais nas bordas repetidamente
        def strip_edge_quotes(s: str) -> str:
            changed = True
            s = s.strip()
            while changed and s:
                changed = False
                if s[0] in quote_chars:
                    s = s[1:].strip()
                    changed = True
                if s and s[-1] in quote_chars:
                    s = s[:-1].strip()
                    changed = True
            return s

        valor_str = strip_edge_quotes(valor_str)

        # Remover ap√≥strofo inicial (marcador de texto do Excel) se o restante for num√©rico
        if valor_str.startswith("'"):
            candidato = valor_str[1:].strip()
            if re.fullmatch(r"[-+]?\d+(?:[\.,]\d+)?", candidato):
                valor_str = candidato

        # Normalizar espa√ßos internos
        valor_str = valor_str.replace('\u00A0', ' ').strip()

        # Preparar vers√£o para tentativa de convers√£o num√©rica
        s = valor_str

        # Tratar casos onde ambos '.' e ',' aparecem (assumir '.' milhares e ',' decimal)
        if ',' in s and '.' in s:
            s = s.replace('.', '').replace(',', '.')
        else:
            # Se s√≥ tem v√≠rgula, tratar como separador decimal
            s = s.replace(',', '.')

        # Remover espa√ßos remanescentes
        s = s.replace(' ', '')

        # Evitar transformar c√≥digos alfanum√©ricos com d√≠gitos em n√∫meros
        if re.search(r'[A-Za-z]', valor_str):
            return valor_str

        # Preservar zeros √† esquerda (ex: '037') ‚Äî n√£o converter para int se come√ßar com '0' e tiver >1 d√≠gito
        if re.match(r'^0\d+$', s):
            return valor_str

        # Tentar converter para n√∫mero (float ou int)
        try:
            valor_float = float(s)
            # Se for inteiro, retornar int (tipo num√©rico)
            if valor_float.is_integer():
                return int(round(valor_float))
            # Caso contr√°rio, retornar float
            return float(valor_float)
        except (ValueError, TypeError, OverflowError):
            # N√£o √© num√©rico ‚Äî retornar string limpa
            return valor_str

    def enviar_csv_para_planilha(self, caminho_csv_ou_padrao: str, nome_aba: str) -> bool:
        """
        M√©todo gen√©rico para enviar CSV para uma aba espec√≠fica
        COMPLEMENTA dados existentes (n√£o remove) e remove cabe√ßalho do CSV
        Detecta automaticamente o separador correto do CSV
        """
        try:
            # Verificar se √© um caminho direto ou padr√£o para buscar
            if os.path.exists(caminho_csv_ou_padrao):
                caminho_csv = caminho_csv_ou_padrao
            else:
                # Tentar encontrar arquivo pelo padr√£o
                caminho_csv = self.encontrar_arquivo_mais_recente(caminho_csv_ou_padrao)
                if not caminho_csv:
                    print(f"‚ùå Arquivo n√£o encontrado para padr√£o: {caminho_csv_ou_padrao}")
                    return False
            
            # Detectar separador automaticamente com suporte robusto a encodings
            import csv
            
            # Lista extendida de encodings para tentar (ordem de prioridade)
            encodings = [
                'utf-8-sig',    # UTF-8 com BOM (comum em Excel)
                'utf-8', 
                'latin-1', 
                'cp1252',       # Windows-1252 (Western European)
                'iso-8859-1',   # ISO Latin-1
                'cp850',        # DOS Latin-1
                'utf-16',       # UTF-16 (pode ter BOM)
                'utf-16le',     # UTF-16 Little Endian
                'utf-16be'      # UTF-16 Big Endian
            ]
            df = None
            encoding_usado = None
            melhor_sep = ','
            max_colunas = 0
            
            for encoding in encodings:
                try:
                    print(f"üîç Tentando encoding: {encoding}")
                    
                    with open(caminho_csv, 'r', encoding=encoding, errors='replace') as f:
                        # Ler primeira linha para detectar separador
                        primeira_linha = f.readline()
                        
                        # Se a linha est√° vazia ou muito pequena, tentar pr√≥xima
                        if not primeira_linha or len(primeira_linha.strip()) < 3:
                            f.seek(0)  # Voltar ao in√≠cio
                            primeira_linha = f.read(1000)  # Ler primeiro KB
                        
                        # Testar diferentes separadores
                        separadores = [';', ',', '\t', '|', ':']
                        temp_max_colunas = 0
                        temp_melhor_sep = ','
                        
                        for sep in separadores:
                            # Contar colunas na primeira linha
                            colunas = len(primeira_linha.split(sep))
                            # Verificar se tem pelo menos 2 colunas e se n√£o s√£o todas vazias
                            if colunas >= 2 and colunas > temp_max_colunas:
                                # Verificar se n√£o √© um falso positivo (muitos campos vazios)
                                campos_nao_vazios = sum(1 for campo in primeira_linha.split(sep) if campo.strip())
                                if campos_nao_vazios >= 2:  # Pelo menos 2 campos com dados
                                    temp_max_colunas = colunas
                                    temp_melhor_sep = sep
                        
                        max_colunas = temp_max_colunas
                        melhor_sep = temp_melhor_sep
                        
                        print(f"üîç Separador detectado: '{melhor_sep}' ({max_colunas} colunas)")
                    
                    # Tentar ler o CSV completo com configura√ß√µes detectadas
                    df = pd.read_csv(
                        caminho_csv, 
                        sep=melhor_sep, 
                        encoding=encoding,
                        on_bad_lines='skip',    # Pular linhas problem√°ticas
                        engine='python',        # Engine mais tolerante
                        quoting=csv.QUOTE_ALL,  # Tratar todas as aspas corretamente
                        quotechar='"',          # Caractere de aspas padr√£o
                        skipinitialspace=True,  # Remove espa√ßos extras
                        na_values=['', 'N/A', 'NULL', 'null', 'None', '#N/A', '#NULL!'],  # Valores nulos
                        keep_default_na=True,
                        doublequote=True,       # Tratar aspas duplas escapadas
                        escapechar=None         # N√£o usar caractere de escape
                    )
                    
                    encoding_usado = encoding
                    print(f"üìä CSV carregado: {len(df)} linhas, {len(df.columns)} colunas")
                    print(f"üî§ Encoding usado: {encoding}")
                    print(f"üìã Colunas: {list(df.columns)[:5]}{'...' if len(df.columns) > 5 else ''}")
                    
                    # Verificar se DataFrame tem dados v√°lidos
                    if len(df) > 0 and len(df.columns) > 0:
                        break  # Sucesso!
                    else:
                        print(f"‚ö†Ô∏è DataFrame vazio com {encoding}, tentando pr√≥ximo...")
                        df = None
                        continue
                    
                except UnicodeDecodeError as ude:
                    print(f"‚ùå Erro de encoding {encoding}: {ude}")
                    continue
                except pd.errors.EmptyDataError:
                    print(f"‚ö†Ô∏è Arquivo vazio ou sem dados v√°lidos com {encoding}")
                    continue
                except pd.errors.ParserError as pe:
                    print(f"‚ö†Ô∏è Erro de parsing com {encoding}: {pe}")
                    continue
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro com encoding {encoding}: {e}")
                    continue
            
            if df is None:
                # √öltimo recurso: tentar leitura bin√°ria e convers√£o manual
                print("üîß Tentando leitura bin√°ria como √∫ltimo recurso...")
                try:
                    with open(caminho_csv, 'rb') as f:
                        conteudo_bytes = f.read()
                    
                    # Detectar encoding usando chardet se dispon√≠vel
                    try:
                        import chardet
                        detectado = chardet.detect(conteudo_bytes)
                        encoding_detectado = detectado['encoding']
                        confianca = detectado['confidence']
                        
                        print(f"üîç Chardet detectou: {encoding_detectado} (confian√ßa: {confianca:.2f})")
                        
                        if encoding_detectado and confianca > 0.7:
                            conteudo_texto = conteudo_bytes.decode(encoding_detectado, errors='replace')
                            
                            # Salvar temporariamente e tentar ler
                            temp_file = caminho_csv + '.temp'
                            with open(temp_file, 'w', encoding='utf-8') as f:
                                f.write(conteudo_texto)
                            
                            df = pd.read_csv(
                                temp_file,
                                sep=melhor_sep,
                                encoding='utf-8',
                                on_bad_lines='skip',
                                engine='python'
                            )
                            
                            # Remover arquivo tempor√°rio
                            os.remove(temp_file)
                            encoding_usado = f"{encoding_detectado} (convertido via chardet)"
                            
                    except ImportError:
                        print("üí° Instale 'chardet' para melhor detec√ß√£o: pip install chardet")
                except Exception as e:
                    print(f"‚ö†Ô∏è Falha na leitura bin√°ria: {e}")
                
                if df is None:
                    raise Exception(
                        "N√£o foi poss√≠vel ler o arquivo CSV com nenhum encoding testado. "
                        "Verifique se o arquivo est√° corrompido ou em formato n√£o suportado. "
                        f"Encodings testados: {', '.join(encodings)}"
                    )
            
            # Abre a planilha e aba
            planilha = self.client.open_by_key(self.ID_PLANILHA)
            print(f"üìã Conectado √† planilha: '{planilha.title}'")
            aba = planilha.worksheet(nome_aba)
            print(f"üìÑ Processando aba: '{nome_aba}'")
            
            # Encontrar a pr√≥xima linha vazia (ap√≥s os dados existentes)
            valores_existentes = aba.get_all_values()
            # Encontrar √∫ltima linha com dados (n√£o vazia)
            ultima_linha_com_dados = 0
            for i, linha in enumerate(valores_existentes):
                if any(cell.strip() for cell in linha):  # Se tem algum dado na linha
                    ultima_linha_com_dados = i + 1
            
            # Pr√≥xima linha dispon√≠vel
            proxima_linha = ultima_linha_com_dados + 1
            
            # SOLU√á√ÉO: Adicionar linha em branco para expandir a planilha se necess√°rio
            try:
                # Tentar adicionar uma linha vazia na pr√≥xima posi√ß√£o para garantir espa√ßo
                linha_teste = proxima_linha + len(df)
                if linha_teste > len(valores_existentes):
                    print(f"üìà Expandindo planilha para acomodar {len(df)} linhas...")
                    # Adicionar uma linha em branco para for√ßar expans√£o
                    aba.append_row([''])
                    print(f"‚úÖ Planilha expandida com sucesso!")
            except Exception as expand_error:
                print(f"‚ö†Ô∏è Aviso ao expandir planilha: {expand_error}")
            
            # Preparar dados SEM CABE√áALHO (s√≥ os dados do CSV)
            dados_csv = df.values.tolist()
            
            # Identificar colunas de data baseado nos nomes
            colunas_data = []
            palavras_chave_data = ['data', 'date', 'abertura', 'fechamento', 'criado', 'cria√ß√£o', 
                                    'modificado', 'atualizado', 'hora', 'timestamp', 'criacao']
            
            for idx, col_nome in enumerate(df.columns):
                col_lower = str(col_nome).lower()
                if any(palavra in col_lower for palavra in palavras_chave_data):
                    colunas_data.append(idx)
            
            if colunas_data:
                print(f"üìÖ Colunas de data identificadas: {[df.columns[i] for i in colunas_data]}")
            
            # Converter valores usando fun√ß√£o de limpeza inteligente
            print(f"üîß Aplicando limpeza autom√°tica de formata√ß√£o (n√∫meros, datas e aspas)...")
            dados_formatados = []
            for linha in dados_csv:
                linha_formatada = []
                for idx, valor in enumerate(linha):
                    # Se √© coluna de data, usar limpeza espec√≠fica para data
                    if idx in colunas_data:
                        valor_limpo = self.limpar_data_formato(valor)
                    else:
                        # Sen√£o, usar limpeza normal de n√∫mero
                        valor_limpo = self.limpar_numero_formato(valor)
                    linha_formatada.append(valor_limpo)
                dados_formatados.append(linha_formatada)
            
            print(f"‚úÖ Formata√ß√£o limpa aplicada a {len(dados_formatados)} linhas ({len(colunas_data)} colunas de data tratadas)")
            
            # Calcular range para inserir dados
            num_colunas = len(df.columns)
            num_linhas = len(dados_formatados)
            
            if num_linhas > 0:
                # Inserir dados a partir da pr√≥xima linha
                # IMPORTANTE: usar USER_ENTERED para que Sheets interprete datas corretamente
                range_destino = f"A{proxima_linha}:{chr(65 + num_colunas - 1)}{proxima_linha + num_linhas - 1}"
                aba.update(range_destino, dados_formatados, value_input_option='USER_ENTERED')
                
            # PINTAR TODAS AS LINHAS ADICIONADAS COM VERDE LEROY MERLIN
            try:
                if num_linhas > 0:
                    # Definir range de todas as linhas inseridas
                    range_colorir = f"A{proxima_linha}:{chr(65 + num_colunas - 1)}{proxima_linha + num_linhas - 1}"
                    
                    print(f"üé® Colorindo linhas {proxima_linha} at√© {proxima_linha + num_linhas - 1}...")
                    
                    # Criar formata√ß√£o verde Leroy Merlin com gradiente
                    formato_verde_claro = {
                        "backgroundColor": {
                            "red": 0.8,    # Verde bem claro para contraste
                            "green": 0.95,  
                            "blue": 0.85
                        },
                        "borders": {
                            "top": {"style": "SOLID", "width": 1, "color": {"red": 0.0, "green": 0.66, "blue": 0.35}},
                            "bottom": {"style": "SOLID", "width": 1, "color": {"red": 0.0, "green": 0.66, "blue": 0.35}},
                            "left": {"style": "SOLID", "width": 1, "color": {"red": 0.0, "green": 0.66, "blue": 0.35}},
                            "right": {"style": "SOLID", "width": 1, "color": {"red": 0.0, "green": 0.66, "blue": 0.35}}
                        },
                        "textFormat": {
                            "foregroundColor": {
                                "red": 0.1,
                                "green": 0.3,
                                "blue": 0.1
                            },
                            "fontSize": 10
                        }
                    }
                    
                    # Aplicar formata√ß√£o para todas as linhas
                    aba.format(range_colorir, formato_verde_claro)
                    
                    # PRIMEIRA LINHA COM DESTAQUE ESPECIAL (verde escuro)
                    primeira_linha_range = f"A{proxima_linha}:{chr(65 + num_colunas - 1)}{proxima_linha}"
                    
                    formato_primeira_linha = {
                        "backgroundColor": {
                            "red": 0.0,
                            "green": 0.66,  # #00A859 Leroy Merlin
                            "blue": 0.35
                        },
                        "textFormat": {
                            "foregroundColor": {
                                "red": 1.0,
                                "green": 1.0,
                                "blue": 1.0
                            },
                            "bold": True,
                            "fontSize": 11
                        },
                        "borders": {
                            "top": {"style": "SOLID", "width": 2, "color": {"red": 0.0, "green": 0.53, "blue": 0.28}},
                            "bottom": {"style": "SOLID", "width": 2, "color": {"red": 0.0, "green": 0.53, "blue": 0.28}},
                            "left": {"style": "SOLID", "width": 2, "color": {"red": 0.0, "green": 0.53, "blue": 0.28}},
                            "right": {"style": "SOLID", "width": 2, "color": {"red": 0.0, "green": 0.53, "blue": 0.28}}
                        }
                    }
                    
                    aba.format(primeira_linha_range, formato_primeira_linha)
                    
                    print(f"üé®‚úÖ Colora√ß√£o aplicada com sucesso!")
                    print(f"   üü¢ Primeira linha: Verde escuro Leroy Merlin (destaque)")
                    print(f"   üíö Demais linhas: Verde claro com bordas (total: {num_linhas} linhas)")
                    
                    # Retornar informa√ß√µes das linhas adicionadas para aplicar f√≥rmulas
                    nome_arquivo = os.path.basename(caminho_csv)
                    print(f"‚úÖ {nome_arquivo} ‚Üí {nome_aba} (linhas {proxima_linha}-{proxima_linha + num_linhas - 1})")
                    print(f"üìä {num_linhas} registros adicionados (sem cabe√ßalho)")
                    print(f"üîß Separador usado: '{melhor_sep}'")
                    
                    return {
                        'sucesso': True,
                        'linha_inicial': proxima_linha,
                        'linha_final': proxima_linha + num_linhas - 1,
                        'num_linhas': num_linhas
                    }
                    
            except Exception as format_error:
                print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel aplicar formata√ß√£o colorida: {format_error}")
                print("üí° Os dados foram inseridos com sucesso, apenas sem colora√ß√£o")
                
                nome_arquivo = os.path.basename(caminho_csv)
                print(f"‚úÖ {nome_arquivo} ‚Üí {nome_aba} (linhas {proxima_linha}-{proxima_linha + num_linhas - 1})")
                print(f"üìä {num_linhas} registros adicionados (sem cabe√ßalho)")
                print(f"üîß Separador usado: '{melhor_sep}'")
                
                # Retornar informa√ß√µes das linhas adicionadas para aplicar f√≥rmulas
                return {
                    'sucesso': True,
                    'linha_inicial': proxima_linha,
                    'linha_final': proxima_linha + num_linhas - 1,
                    'num_linhas': num_linhas
                }
            else:
                print(f"‚ö†Ô∏è Arquivo CSV vazio: {caminho_csv}")
            
            return {'sucesso': True, 'linha_inicial': None, 'linha_final': None, 'num_linhas': 0}
            
        except Exception as e:
            print(f"‚ùå Erro ao processar arquivo: {str(e)}")
            return {'sucesso': False, 'linha_inicial': None, 'linha_final': None, 'num_linhas': 0}
    
    def aplicar_formula_coluna(self, nome_aba, coluna, linha_inicial, formula_template, linha_final=None):
        """
        Aplica uma f√≥rmula em toda uma coluna
        
        Args:
            nome_aba: Nome da aba
            coluna: Letra da coluna (ex: 'P')
            linha_inicial: Primeira linha (geralmente 2 para pular cabe√ßalho)
            formula_template: Template da f√≥rmula com {row} como placeholder
            linha_final: √öltima linha (None = detectar automaticamente)
        
        Exemplo:
            self.aplicar_formula_coluna('BASE VOZ', 'P', 2, '=TEXT(C{row};"DD/M")')
        """
        try:
            planilha = self.client.open_by_key(self.ID_PLANILHA)
            aba = planilha.worksheet(nome_aba)
            
            # Detectar automaticamente a √∫ltima linha com dados se n√£o especificada
            if linha_final is None:
                valores = aba.get_all_values()
                linha_final = len(valores)
            
            # Se n√£o h√° dados al√©m do cabe√ßalho, n√£o aplicar f√≥rmulas
            if linha_final < linha_inicial:
                print(f"  ‚ö†Ô∏è Sem dados para aplicar f√≥rmulas na coluna {coluna}")
                return True
            
            # Criar lista de f√≥rmulas
            formulas = []
            for linha in range(linha_inicial, linha_final + 1):
                formula = formula_template.replace('{row}', str(linha))
                formulas.append([formula])
            
            # Aplicar as f√≥rmulas com USER_ENTERED para que sejam interpretadas como f√≥rmulas
            range_cells = f'{coluna}{linha_inicial}:{coluna}{linha_final}'
            aba.update(range_cells, formulas, value_input_option='USER_ENTERED')
            
            print(f"  ‚úÖ F√≥rmulas aplicadas em {range_cells} ({linha_final - linha_inicial + 1} c√©lulas)")
            return True
            
        except Exception as e:
            print(f"  ‚ùå Erro ao aplicar f√≥rmulas na coluna {coluna}: {str(e)}")
            return False
    
    def aplicar_formulas_multiplas(self, nome_aba, formulas_config, linha_inicial=2):
        """
        Aplica m√∫ltiplas f√≥rmulas de uma vez
        
        Args:
            nome_aba: Nome da aba
            formulas_config: Lista de dicts com {'coluna': 'X', 'formula': '=...{row}...'}
            linha_inicial: Linha inicial (padr√£o: 2 para pular cabe√ßalho)
        
        Exemplo:
            self.aplicar_formulas_multiplas('BASE VOZ', [
                {'coluna': 'P', 'formula': '=TEXT(C{row};"DD/M")'},
                {'coluna': 'Q', 'formula': '=M{row}-K{row}'}
            ])
        """
        try:
            planilha = self.client.open_by_key(self.ID_PLANILHA)
            aba = planilha.worksheet(nome_aba)
            valores = aba.get_all_values()
            linha_final = len(valores)
            
            if linha_final < linha_inicial:
                print(f"  ‚ö†Ô∏è Sem dados para aplicar f√≥rmulas em {nome_aba}")
                return True
            
            print(f"  üîß Aplicando {len(formulas_config)} f√≥rmula(s) em {nome_aba}...")
            
            sucesso = True
            for config in formulas_config:
                coluna = config['coluna']
                formula_template = config['formula']
                
                resultado = self.aplicar_formula_coluna(
                    nome_aba, 
                    coluna, 
                    linha_inicial, 
                    formula_template,
                    linha_final
                )
                
                if not resultado:
                    sucesso = False
            
            return sucesso
            
        except Exception as e:
            print(f"  ‚ùå Erro ao aplicar f√≥rmulas m√∫ltiplas: {str(e)}")
            return False
    
    def aplicar_formulas_linhas_novas(self, nome_aba, formulas_config, linha_inicial, linha_final):
        """
        Aplica f√≥rmulas APENAS nas linhas rec√©m-adicionadas (as que ficaram verdes)
        M√âTODO: Copia a f√≥rmula da linha anterior e cola nas linhas novas (simulando Ctrl+C + Ctrl+V)
        
        Args:
            nome_aba: Nome da aba
            formulas_config: Lista de dicts com {'coluna': 'X', 'formula': '=...{row}...'}
            linha_inicial: Primeira linha adicionada
            linha_final: √öltima linha adicionada
        
        Exemplo:
            # Ap√≥s enviar CSV que retornou linha_inicial=100, linha_final=150
            self.aplicar_formulas_linhas_novas('BASE VOZ', [
                {'coluna': 'P', 'formula': '=TEXT(C{row};"DD/M")'}
            ], 100, 150)
        """
        try:
            if linha_inicial is None or linha_final is None:
                print(f"  ‚ö†Ô∏è Sem linhas novas para aplicar f√≥rmulas")
                return True
            
            planilha = self.client.open_by_key(self.ID_PLANILHA)
            aba = planilha.worksheet(nome_aba)
            
            print(f"  üîß Copiando e colando f√≥rmulas nas linhas {linha_inicial}-{linha_final}...")
            print(f"  üìã M√©todo: Copiar f√≥rmula da linha {linha_inicial - 1} e colar nas novas linhas")
            
            sucesso = True
            for config in formulas_config:
                coluna = config['coluna']
                
                # ETAPA 1: Copiar a f√≥rmula da linha ANTERIOR (linha_inicial - 1)
                linha_origem = linha_inicial - 1
                celula_origem = f'{coluna}{linha_origem}'
                
                try:
                    # Pegar o valor/f√≥rmula da c√©lula origem
                    valor_origem = aba.acell(celula_origem, value_render_option='FORMULA').value
                    
                    if valor_origem and valor_origem.startswith('='):
                        print(f"    üìã Copiando de {celula_origem}: {valor_origem[:60]}...")
                        
                        # ETAPA 2: Usar copyPaste do Google Sheets API (simula Ctrl+C + Ctrl+V)
                        # Isso faz o Google Sheets ajustar automaticamente as refer√™ncias
                        requests = [{
                            "copyPaste": {
                                "source": {
                                    "sheetId": aba.id,
                                    "startRowIndex": linha_origem - 1,  # 0-indexed
                                    "endRowIndex": linha_origem,
                                    "startColumnIndex": self._letra_para_indice(coluna),
                                    "endColumnIndex": self._letra_para_indice(coluna) + 1
                                },
                                "destination": {
                                    "sheetId": aba.id,
                                    "startRowIndex": linha_inicial - 1,  # 0-indexed
                                    "endRowIndex": linha_final,
                                    "startColumnIndex": self._letra_para_indice(coluna),
                                    "endColumnIndex": self._letra_para_indice(coluna) + 1
                                },
                                "pasteType": "PASTE_FORMULA"  # Copiar apenas a f√≥rmula
                            }
                        }]
                        
                        # Executar o copyPaste
                        body = {'requests': requests}
                        planilha.batch_update(body)
                        
                        print(f"    ‚úÖ F√≥rmula copiada e colada em {coluna}{linha_inicial}:{coluna}{linha_final}")
                        
                    else:
                        # Se n√£o tem f√≥rmula na linha anterior, criar do zero usando template
                        print(f"    ‚ö†Ô∏è N√£o h√° f√≥rmula em {celula_origem}, criando do zero...")
                        formula_template = config['formula']
                        formulas = []
                        for linha in range(linha_inicial, linha_final + 1):
                            formula = formula_template.replace('{row}', str(linha))
                            formulas.append([formula])
                        
                        range_cells = f'{coluna}{linha_inicial}:{coluna}{linha_final}'
                        aba.update(range_cells, formulas, value_input_option='USER_ENTERED')
                        print(f"    ‚úÖ F√≥rmula criada em {coluna}{linha_inicial}:{coluna}{linha_final}")
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è Erro ao copiar de {celula_origem}: {e}")
                    # Fallback: criar f√≥rmula do zero
                    formula_template = config['formula']
                    formulas = []
                    for linha in range(linha_inicial, linha_final + 1):
                        formula = formula_template.replace('{row}', str(linha))
                        formulas.append([formula])
                    
                    range_cells = f'{coluna}{linha_inicial}:{coluna}{linha_final}'
                    aba.update(range_cells, formulas, value_input_option='USER_ENTERED')
                    print(f"    ‚úÖ F√≥rmula criada (fallback) em {coluna}{linha_inicial}:{coluna}{linha_final}")
            
            return sucesso
            
        except Exception as e:
            print(f"  ‚ùå Erro ao aplicar f√≥rmulas nas linhas novas: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
    
    def _letra_para_indice(self, letra):
        """Converte letra de coluna (A, B, Z, AA) para √≠ndice num√©rico (0-indexed)"""
        indice = 0
        for char in letra:
            indice = indice * 26 + (ord(char.upper()) - ord('A') + 1)
        return indice - 1
    
    def aplicar_formulas_todas_linhas(self, nome_aba, formulas_config, linha_inicial=2, linha_final=None):
        """
        Aplica f√≥rmulas em TODAS as linhas com dados (n√£o apenas nas novas)
        Isso garante que todas as linhas tenham as f√≥rmulas, permitindo que ao adicionar
        novas linhas manualmente, elas sejam preenchidas automaticamente
        
        Args:
            nome_aba: Nome da aba
            formulas_config: Lista de dicts com {'coluna': 'X', 'formula': '=...{row}...'}
            linha_inicial: Primeira linha para aplicar f√≥rmulas (padr√£o: 2, ap√≥s cabe√ßalho)
            linha_final: √öltima linha para aplicar f√≥rmulas (None = detectar automaticamente)
        
        Exemplo:
            self.aplicar_formulas_todas_linhas('BASE RESOLVIDA', [
                {'coluna': 'U', 'formula': '=B{row}'},
                {'coluna': 'V', 'formula': '=C{row}'}
            ], linha_inicial=2, linha_final=500)
        """
        try:
            planilha = self.client.open_by_key(self.ID_PLANILHA)
            aba = planilha.worksheet(nome_aba)
            
            # Detectar automaticamente a √∫ltima linha se n√£o especificada
            if linha_final is None:
                valores = aba.get_all_values()
                linha_final = len(valores)
            
            # Validar que h√° linhas para processar
            if linha_final < linha_inicial:
                print(f"  ‚ö†Ô∏è Sem dados para aplicar f√≥rmulas (linha_inicial={linha_inicial}, linha_final={linha_final})")
                return True
            
            total_linhas = linha_final - linha_inicial + 1
            print(f"  üîß Aplicando {len(formulas_config)} f√≥rmula(s) em TODAS as {total_linhas} linhas ({linha_inicial}-{linha_final})...")
            
            sucesso = True
            for config in formulas_config:
                coluna = config['coluna']
                formula_template = config['formula']
                
                # Criar f√≥rmulas para TODAS as linhas
                formulas = []
                for linha in range(linha_inicial, linha_final + 1):
                    formula = formula_template.replace('{row}', str(linha))
                    formulas.append([formula])
                
                # Aplicar f√≥rmulas em lote (mais eficiente)
                range_cells = f'{coluna}{linha_inicial}:{coluna}{linha_final}'
                aba.update(range_cells, formulas, value_input_option='USER_ENTERED')
                
                print(f"    ‚úÖ Coluna {coluna}: {total_linhas} f√≥rmulas aplicadas ({coluna}{linha_inicial}:{coluna}{linha_final})")
            
            print(f"  üéâ Todas as f√≥rmulas aplicadas com sucesso em {total_linhas} linhas!")
            return sucesso
            
        except Exception as e:
            print(f"  ‚ùå Erro ao aplicar f√≥rmulas em todas as linhas: {str(e)}")
            import traceback
            traceback.print_exc()
            return False